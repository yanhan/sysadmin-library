# This comes default with haproxy 1.8.8
global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# Default ciphers to use on SSL-enabled listening sockets.
	# For more information, see ciphers(1SSL). This list is from:
	#  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
	# An alternative list with additional directives can be obtained from
	#  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
	ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
	ssl-default-bind-options no-sslv3

# This comes default with haproxy 1.8.8
defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

# Example TCP load balancing configuration.
# We use this for a multi master k8s control plane.
# Reference: https://stackoverflow.com/a/39052040
frontend k8s_api_server
	bind *:6443
	mode tcp
	timeout client 15s
	default_backend k8s_api_server

backend k8s_api_server
	mode tcp
	balance roundrobin
	timeout connect 10s
	timeout server 30s
	server master01 10.2.0.20:6443 check
	server master02 10.2.0.21:6443 check
	server master03 10.2.0.22:6443 check


# Example HTTP load balancing configuration.
# We use this to test things out by running a Flask web server on port 8080
# on each backend node.
# Reference: https://serversforhackers.com/c/load-balancing-with-haproxy
frontend webserver
	bind *:8080
	mode http
	default_backend webserver

backend webserver
	mode http
	balance roundrobin
	option forwardfor
	http-request set-header X-Forwarded-Port %[dst_port]
	http-request set-header X-Forwarded-Proto https if { ssl_fc }
	option httpchk HEAD / HTTP/1.1\r\nHost:localhost
	server web01 10.2.0.20:8080 check
	server web02 10.2.0.21:8080 check
	server web03 10.2.0.22:8080 check
